function onLoad()
	clearTable()
	spawnObstacles()
	trackCurrentPlayers()
end

function clearTable()
	for key, value in pairs(getAllObjects()) do
		value.destruct()
	end
end

function spawnObstacles()
	local block = spawnObject({
		type = 'BlockRectangle',
		position = { x = 0, y = 1, z = 10.5 },
		rotation = { x = 0, y = 90, z = 0 }
	})
	block.setLock(true)

	block = spawnObject({
		type = 'BlockRectangle',
		position = { x = -1.5, y = 1, z = 10 },
		rotation = { x = 0, y = 0, z = 0 }
	})
	block.setLock(true)

	block = spawnObject({
		type = 'BlockRectangle',
		position = { x = 1.5, y = 1, z = 10 },
		rotation = { x = 0, y = 0, z = 0 }
	})
	block.setLock(true)
end

function trackCurrentPlayers()
	for index, player in ipairs(Player.getPlayers()) do
		if player.color ~= 'Grey' then
			trackPlayer(player)
		end
	end
end

function onPlayerChangedColor(player_color)
	if player_color == 'Grey' then return end
	local player = Player[player_color]
	trackPlayer(player)
end

local knownPlayers = {}
function trackPlayer(player)
	local player_color = player.color
	local steam_id = player.steam_id

	local playerData = knownPlayers[steam_id]
	if playerData == nil then
		playerData = initNewPlayer(player)
		knownPlayers[steam_id] = playerData
	end

	local avatarObject = playerData.avatarObject
	avatarObject.setColorTint(stringColorToRGB(player_color))
end

function initNewPlayer(player)
	printToColor('Use the keypad to interact with your avatar.', player.color, stringColorToRGB('White'))

	local targetPosition = { x = 0, y = 1, z = 0 }
	local targetRotation = { x = 0, y = 0, z = 0 }
	local object = spawnObject({
		type = 'Figurine_Kimi_Kat',
		position = targetPosition,
		rotation = targetRotation
	})

	playerLookAt(player, targetPosition, targetRotation.y)

	return {
		avatarObject = object
	}
end

function playerLookAt(player, position, yaw)
	return player.lookAt({
		position = position,
		pitch = 22.5,
		yaw = yaw,
		distance = 2
	})
end

function onScriptingButtonDown(index, player_color)
	if player_color == 'Grey' then return end
	local player = Player[player_color]
	processPlayerInput(player, index)
end

function processPlayerInput(player, keyPressed)
	local forthKey, rightKey, backKey, leftKey = 8, 6, 2, 4
	local turnRightKey, turnLeftKey = 9, 7

	local playerData = knownPlayers[player.steam_id]
	local avatarObject = playerData.avatarObject

	local distance = 1
	local degrees = 45

	local directionTransform = nil
	local rotationTransform = nil

	if keyPressed == forthKey then
		local ft = avatarObject.getTransformForward()
		directionTransform = { x = ft.x, y = ft.y, z = ft.z }
	elseif keyPressed == rightKey then
		local rt = avatarObject.getTransformRight()
		directionTransform = { x = rt.x, y = rt.y, z = rt.z }
	elseif keyPressed == backKey then
		local ft = avatarObject.getTransformForward()
		directionTransform = { x = ft.x * -1, y = ft.y * -1, z = ft.z * -1 }
	elseif keyPressed == leftKey then
		local rt = avatarObject.getTransformRight()
		directionTransform = { x = rt.x * -1, y = rt.y * -1, z = rt.z * -1 }
	elseif keyPressed == turnRightKey then
		rotationTransform = { x = 0, y = 1, z = 0 }
	elseif keyPressed == turnLeftKey then
		rotationTransform = { x = 0, y = -1, z = 0 }
	end

	local targetPosition = avatarObject.getPosition()
	local targetRotation = avatarObject.getRotation()

	if rotationTransform ~= nil then
		targetRotation = {
			x = (targetRotation.x + rotationTransform.x * degrees) % 360,
			y = (targetRotation.y + rotationTransform.y * degrees) % 360,
			z = (targetRotation.z + rotationTransform.z * degrees) % 360
		}
	end

	if directionTransform ~= nil then
		if not isPathObstructed(avatarObject, directionTransform, distance) then
			targetPosition = {
				x = targetPosition.x + directionTransform.x * distance,
				y = targetPosition.y + directionTransform.y * distance,
				z = targetPosition.z + directionTransform.z * distance
			}
		end
	end

	avatarObject.setPositionSmooth(targetPosition)
	avatarObject.setRotationSmooth(targetRotation)

	playerLookAt(player, targetPosition, targetRotation.y)
end

-- cast a box the size of our object in the direction we want to go to find any obstacles
function isPathObstructed(object, direction, distance)
	-- goal: cast the box from our subject object's center
	-- this /almost/ works; small positioning errors when object is askew
	local origin = object.getBounds().center

	-- bounding boxes change size based on an object's rotation; use the unrotated dimensions
	-- shrink this 10% just to provide a little margin and avoid hitting the table all the time
	local bounds = object.getBoundsNormalized()
	local sizeScale = 0.9
	local size = {
		x = bounds.size.x * sizeScale,
		y = bounds.size.y * sizeScale,
		z = bounds.size.z * sizeScale
	}

	local orientation = object.getRotation()

	local result = Physics.cast({
		origin = origin,
		direction = direction,
		type = 3,
		size = size,
		orientation = orientation,
		max_distance = distance
	})

	local foundHit = false
	for index, hit in ipairs(result) do
		-- filter out the subject object
		-- if we didn't shrink our size by 10% we would also need to deal with the table here
		if object ~= hit.hit_object then
			foundHit = true
		end
	end

	return foundHit
end

-- Clickcube POC by Todd Ross
-- http://steamcommunity.com/sharedfiles/filedetails/?id=1214163587

local debug = false

function onLoad()
  --clearTable()
  trackCurrentPlayers()
  --spawnClickcube()

  Timer.create({
    identifier = tostring({}),
    function_name = 'respawnClickcube',
    delay = 10,
    repetitions = 0
  })
end

function respawnClickcube()
  local blockCount = 0
  for key, value in pairs(getAllObjects()) do
    blockCount = blockCount + 1
  end
  if blockCount == 0 then
    spawnClickcube()
  end
end

function clearTable()
  for key, value in pairs(getAllObjects()) do
    value.destruct()
  end
end

function trackCurrentPlayers()
  for index, player in ipairs(Player.getPlayers()) do
    if player.color ~= 'Grey' then
      trackPlayer(player)
    end
  end
end

function onPlayerChangedColor(player_color)
  if player_color == 'Grey' then return end
  local player = Player[player_color]
  trackPlayer(player)
end

local knownPlayers = {}
function trackPlayer(player)
  local steam_id = player.steam_id

  local playerData = knownPlayers[steam_id]
  if playerData == nil then
    playerData = initNewPlayer(player)
    knownPlayers[steam_id] = playerData
  else
    playerData.color = player.color
  end

  displayScores()
end

local experiencePerLevel = 20
local playerLevelProperties = {
  { damage = 1 },
  { damage = 2 },
  { damage = 3 },
  { damage = 4 },
  { damage = 5 },
  { damage = 6 },
  { damage = 7 },
  { damage = 8 },
  { damage = 9 },
  { damage = 10 },
  { damage = 11 },
  { damage = 12 },
  { damage = 13 },
  { damage = 14 },
  { damage = 15 },
  { damage = 16 },
  { damage = 17 },
  { damage = 18 },
  { damage = 19 },
  { damage = 20 },
}

function calcPlayerLevel(experience)
  local playerLevel = math.floor(experience / experiencePerLevel) + 1
  return math.min(playerLevel, #playerLevelProperties)
end

function initNewPlayer(player)
  return {
    color = player.color,
    name = player.steam_name,
    attacks = 0,
    kills = 0,
    experience = 0
  }
end

function spawnClickcube()
  local spawnClickcubeBlockParams = {
    position = { x = 0, y = 0, z = 0 }
  }
  for x = -4, 4 do
    for y = 0, 8 do
      for z = -4, 4 do
        spawnClickcubeBlockParams.position.x = x
        spawnClickcubeBlockParams.position.y = 1.5 + y
        spawnClickcubeBlockParams.position.z = z

        local blockLevel = 0
        if x == -4 or x == 4 or y == 0 or y == 8 or z == -4 or z == 4 then
          blockLevel = 1
        elseif x == -3 or x == 3 or y == 1 or y == 7 or z == -3 or z == 3 then
          blockLevel = 2
        elseif x == -2 or x == 2 or y == 2 or y == 6 or z == -2 or z == 2 then
          blockLevel = 3
        elseif x == -1 or x == 1 or y == 3 or y == 5 or z == -1 or z == 1 then
          blockLevel = 4
        else
          blockLevel = 5
        end
        spawnClickcubeBlock(spawnClickcubeBlockParams, blockLevel)
      end
    end
  end
end

local buttonAlpha = debug and 1 or 0
local blockFaceAButtonParams = {
  click_function = 'onButtonClick',
  function_owner = Global,
  label = 'A',
  position = { 0, 0.5, 0 },
  rotation = { 0, 0, 0 },
  scale = { 1, 1, 1 },
  width = 500,
  height = 500,
  font_size = 400,
  color = { 0, 1, 0, buttonAlpha },
  font_color = { 0, 0, 0, buttonAlpha }
}

local blockFaceBButtonParams = {
  click_function = 'onButtonClick',
  function_owner = Global,
  label = 'B',
  position = { 0, -0.5, 0 },
  rotation = { 180, 0, 0 },
  scale = { 1, 1, 1 },
  width = 500,
  height = 500,
  font_size = 400,
  color = { 0, 1, 0, buttonAlpha },
  font_color = { 0, 0, 0, buttonAlpha }
}

local blockFaceCButtonParams = {
  click_function = 'onButtonClick',
  function_owner = Global,
  label = 'C',
  position = { 0.5, 0, 0 },
  rotation = { 0, 0, 90 },
  scale = { 1, 1, 1 },
  width = 500,
  height = 500,
  font_size = 400,
  color = { 0, 1, 0, buttonAlpha },
  font_color = { 0, 0, 0, buttonAlpha }
}

local blockFaceDButtonParams = {
  click_function = 'onButtonClick',
  function_owner = Global,
  label = 'D',
  position = { -0.5, 0 , 0 },
  rotation = { 0, 0, -90 },
  scale = { 1, 1, 1 },
  width = 500,
  height = 500,
  font_size = 400,
  color = { 0, 1, 0, buttonAlpha },
  font_color = { 0, 0, 0, buttonAlpha }
}

local blockFaceEButtonParams = {
  click_function = 'onButtonClick',
  function_owner = Global,
  label = 'E',
  position = { 0, 0, 0.5 },
  rotation = { -90, 0, 0 },
  scale = { 1, 1, 1 },
  width = 500,
  height = 500,
  font_size = 400,
  color = { 0, 1, 0, buttonAlpha },
  font_color = { 0, 0, 0, buttonAlpha }
}

local blockFaceFButtonParams = {
  click_function = 'onButtonClick',
  function_owner = Global,
  label = 'F',
  position = { 0, 0, -0.5 },
  rotation = { 90, 0, 0 },
  scale = { 1, 1, 1 },
  width = 500,
  height = 500,
  font_size = 400,
  color = { 0, 1, 0, buttonAlpha },
  font_color = { 0, 0, 0, buttonAlpha }
}

local spawnObjectParams = {
  type = 'BlockSquare'
}

local blockLevelProperties = {
  { health = 10, color = { 0.961, 0.961, 0.961, 1 } },
  { health = 20, color = { 0.933, 0.933, 0.933, 1 } },
  { health = 40, color = { 0.878, 0.878, 0.878, 1 } },
  { health = 80, color = { 0.741, 0.741, 0.741, 1 } },
  { health = 160, color = { 0.620, 0.620, 0.620, 1 } }
}

function spawnClickcubeBlock(params, blockLevel)
  spawnObjectParams.position = params.position

  local block = spawnObject(spawnObjectParams)

  block.setLock(true)

  block.setVar('level', blockLevel)
  block.setVar('health', blockLevelProperties[blockLevel].health)
  block.setVar('experience', blockLevel)

  block.setColorTint(blockLevelProperties[blockLevel].color)

  block.createButton(blockFaceAButtonParams)
  block.createButton(blockFaceBButtonParams)
  block.createButton(blockFaceCButtonParams)
  block.createButton(blockFaceDButtonParams)
  block.createButton(blockFaceEButtonParams)
  block.createButton(blockFaceFButtonParams)

  return block
end

function colorNameToHex(color_name)
  local color = stringColorToRGB(color_name)
  return string.format('%x%x%x', color.r * 255, color.g * 255, color.b * 255)
end

function displayScores()
  local notes = ''
  for steam_id, playerData in pairs(knownPlayers) do
    local playerLevel = calcPlayerLevel(playerData.experience)
    local playerNotes = '[' .. colorNameToHex(playerData.color) .. ']'
      .. playerData.name .. ' - Level(' .. playerLevel .. ')\n'
      .. 'experience(' .. playerData.experience .. ')' .. ' attacks(' .. playerData.attacks .. ') kills(' .. playerData.kills .. ')\n'
      .. 'damage(' .. playerLevelProperties[playerLevel].damage .. ')'
      .. '[-]\n'
    notes = notes .. playerNotes
  end
  setNotes(notes)
end

function onButtonClick(block, player_color)
  if player_color == 'Grey' then return end
  local player = Player[player_color]
  resolveClick(player, block)
end

function resolveClick(player, block)
  local playerData = knownPlayers[player.steam_id]

  local playerLevel = calcPlayerLevel(playerData.experience)

  playerData.attacks = playerData.attacks + 1

  local blockHealth = block.getVar('health')

  blockHealth = blockHealth - playerLevelProperties[playerLevel].damage

  if blockHealth > 0 then
    pulseBlock(block)
  elseif blockHealth <= 0 then
    if not block.getVar('dying') then
      block.setVar('dying', true)

      playerData.kills = playerData.kills + 1
      playerData.experience = playerData.experience + block.getVar('experience')

      local blockLevel = block.getVar('level')
      if blockLevel == 5 then
        for key, value in pairs(getAllObjects()) do
          value.setLock(false)
        end
      end

      killBlock(block)
    end
  end

  block.setVar('health', blockHealth)

  displayScores()
end

function wait(delay)
  local start = os.time()
  while os.time() - start < delay do coroutine.yield(0) end
end

local pulseBlockScales = {
  { 1.1, 1.1, 1.1 },
  { 0.9, 0.9, 0.9 },
  { 1, 1, 1 }
}

function pulseBlock(block)
  function pulseBlockCoroutine()
    block.setScale(pulseBlockScales[1])
    wait(0.1)
    block.setScale(pulseBlockScales[2])
    wait(0.1)
    block.setScale(pulseBlockScales[3])
    return 1
  end
  startLuaCoroutine(Global, 'pulseBlockCoroutine')
end

function killBlock(block)
  function killBlockCoroutine()
    local scale = block.getScale()
    block.setColorTint({ 1, 1, 0, 1 })
    block.setScale({ scale.x * 0.9, scale.y * 0.9, scale.z * 0.9 })
    wait(0.2)
    block.setColorTint({ 0, 1, 1, 1 })
    block.setScale({ scale.x * 0.8, scale.y * 0.8, scale.z * 0.8 })
    wait(0.2)
    block.setColorTint({ 1, 0, 1, 1 })
    block.setScale({ scale.x * 0.7, scale.y * 0.7, scale.z * 0.7 })
    wait(0.2)
    block.destruct()
    return 1
  end
  startLuaCoroutine(Global, 'killBlockCoroutine')
end
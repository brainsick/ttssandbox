-- Clickcube POC by Todd Ross
-- http://steamcommunity.com/sharedfiles/filedetails/?id=1214163587

local debug = false

local cubeSizeX = 9
local cubeSizeY = 9
local cubeSizeZ = 9

local xOffset = -5
local yOffset = 0.5
local zOffset = -5

local experiencePerLevel = 20
local playerLevelProperties = {}
local levelsPerAssistant = 20
for x = 1, 100 do
  table.insert(playerLevelProperties, {
    damage = x,
    assistants = math.floor(x / levelsPerAssistant)
  })
end

function onLoad()
  if debug then print('onLoad') end
  trackCurrentPlayers()
  spawnClickcube()

  Timer.create({
    identifier = tostring({}),
    function_name = 'respawnClickcubeTimer',
    delay = 10,
    repetitions = 0
  })

  Timer.create({
    identifier = tostring({}),
    function_name = 'playerAssistantTimer',
    delay = 1,
    repetitions = 0
  })
end

local livingClickBlocks = {}
function getLivingClickBlock(index)
  if debug then print('getLivingClickBlock') end
  local result = nil
  local blockIndex = 0
  for block, thing in pairs(livingClickBlocks) do
    blockIndex = blockIndex + 1
    if blockIndex == index then
      result = block
    end
  end
  return result
end

local knownPlayers = {}
function playerAssistantTimer()
  if debug then print('playerAssistantTimer') end
  for index, player in ipairs(Player.getPlayers()) do
    if player.color ~= 'Grey' then
      local playerData = knownPlayers[player.steam_id]
      for i = 1, playerLevelProperties[playerData.level].assistants do
        local livingClickBlock = getLivingClickBlock(i)
        if livingClickBlock then
          resolveClick(player, livingClickBlock)
        end
      end
    end
  end
end

function respawnClickcubeTimer()
  if debug then print('respawnClickcubeTimer') end
  local respawn = true
  for block, thing in pairs(livingClickBlocks) do
    respawn = false
  end
  if respawn then
    spawnClickcube()
  end
end

function trackCurrentPlayers()
  if debug then print('trackCurrentPlayers') end
  for index, player in ipairs(Player.getPlayers()) do
    if player.color ~= 'Grey' then
      trackPlayer(player)
    end
  end
end

function onPlayerChangedColor(player_color)
  if debug then print('onPlayerChangedColor') end
  if player_color == 'Grey' then return end
  local player = Player[player_color]
  trackPlayer(player)
end

function trackPlayer(player)
  if debug then print('trackPlayer') end
  local steam_id = player.steam_id

  local playerData = knownPlayers[steam_id]
  if playerData == nil then
    playerData = initNewPlayer(player)
    knownPlayers[steam_id] = playerData
  else
    playerData.color = player.color
  end

  displayScores()
end

function initNewPlayer(player)
  if debug then print('initNewPlayer') end
  return {
    color = player.color,
    name = player.steam_name,
    attacks = 0,
    kills = 0,
    level = 1,
    experience = 0
  }
end

function spawnClickcube()
  if debug then print('spawnClickcube') end

  local position = { x = 0, y = 0, z = 0 }

  local allClickBlocks = getAllClickBlocks()
  local clickBlocksIndex = 0

  local blockLevel = 0
  local block = nil

  livingClickBlocks = {}

  for x = 1, cubeSizeX do
    for y = 1, cubeSizeY do
      for z = 1, cubeSizeZ do
        position.x = x + xOffset
        position.y = y + yOffset
        position.z = z + zOffset

        if x == 1 or x == 9 or y == 1 or y == 9 or z == 1 or z == 9 then
          blockLevel = 1
        elseif x == 2 or x == 8 or y == 2 or y == 8 or z == 2 or z == 8 then
          blockLevel = 2
        elseif x == 3 or x == 7 or y == 3 or y == 7 or z == 3 or z == 7 then
          blockLevel = 3
        elseif x == 4 or x == 6 or y == 4 or y == 6 or z == 4 or z == 6 then
          blockLevel = 4
        else
          blockLevel = 5
        end

        if clickBlocksIndex < #allClickBlocks then
          clickBlocksIndex = clickBlocksIndex + 1
          block = allClickBlocks[clickBlocksIndex]
        else
          block = spawnClickcubeBlock()
        end

        initializeBlock(block, position, blockLevel)

        livingClickBlocks[block] = {}
      end
    end
  end
end

function getAllClickBlocks()
  if debug then print('getAllClickBlocks') end
  local clickBlocks = {}
  for index, object in ipairs(getAllObjects()) do
    local objectName = object.getName()
    if string.find(objectName, 'clickBlock_') then
      table.insert(clickBlocks, object)
    end
  end
  if debug then print('getAllClickBlocks #clickBlocks: ' .. tostring(#clickBlocks)) end
  return clickBlocks
end





local colorNames = {
  'White',   'Brown',   'Red',
  'Orange',  'Yellow',  'Green',
  'Teal',    'Blue',    'Purple',
  'Pink',    'Grey',    'Black',
}

local mapColorNameRGB = {}
local mapColorNameRGBShades = {}
for index, colorName in ipairs(colorNames) do
  local colorRGB = stringColorToRGB(colorName)
  mapColorNameRGB[colorName] = { r = colorRGB.r, g = colorRGB.g, b = colorRGB.b }
  mapColorNameRGBShades[colorName .. '1'] = { r = mapColorNameRGB[colorName].r * 1.00, g = mapColorNameRGB[colorName].g * 1.00, b = mapColorNameRGB[colorName].b * 1.00, 1 }
  mapColorNameRGBShades[colorName .. '2'] = { r = mapColorNameRGB[colorName].r * 0.75, g = mapColorNameRGB[colorName].g * 0.75, b = mapColorNameRGB[colorName].b * 0.75, 1 }
  mapColorNameRGBShades[colorName .. '3'] = { r = mapColorNameRGB[colorName].r * 0.50, g = mapColorNameRGB[colorName].g * 0.50, b = mapColorNameRGB[colorName].b * 0.50, 1 }
  mapColorNameRGBShades[colorName .. '4'] = { r = mapColorNameRGB[colorName].r * 0.25, g = mapColorNameRGB[colorName].g * 0.25, b = mapColorNameRGB[colorName].b * 0.25, 1 }
  mapColorNameRGBShades[colorName .. '5'] = { r = mapColorNameRGB[colorName].r * 0.00, g = mapColorNameRGB[colorName].g * 0.00, b = mapColorNameRGB[colorName].b * 0.00, 1 }
end







local blockLevelProperties = {
  { health = 10,  color = mapColorNameRGBShades['Grey' .. '1'] },
  { health = 20,  color = mapColorNameRGBShades['Grey' .. '2'] },
  { health = 40,  color = mapColorNameRGBShades['Grey' .. '3'] },
  { health = 80,  color = mapColorNameRGBShades['Grey' .. '4'] },
  { health = 160, color = mapColorNameRGBShades['Grey' .. '5'] },
}

local spawnObjectParams = {
  type = 'BlockSquare'
}

function spawnClickcubeBlock()
  if debug then print('spawnClickcubeBlock') end
  local block = spawnObject(spawnObjectParams)
  block.setName('clickBlock_' .. os.time())
  block.tooltip = false

  return block
end

function initializeBlock(block, position, blockLevel)
  if debug then print('initializeBlock') end
  block.setPosition(position)
  block.setScale({ 1, 1, 1 })

  block.setLock(true)

  block.setVar('level', blockLevel)
  block.setVar('health', blockLevelProperties[blockLevel].health)
  block.setVar('experience', blockLevel)

  block.setColorTint(blockLevelProperties[blockLevel].color)

  if not block.getButtons() then
    addButtons(block)
  end

  return block
end

local buttonAlpha = debug and 1 or 0
local blockFaceAButtonParams = {
  click_function = 'onButtonClick',
  function_owner = Global,
  label = 'A',
  position = { 0, 0.5, 0 },
  rotation = { 0, 0, 0 },
  scale = { 1, 1, 1 },
  width = 500,
  height = 500,
  font_size = 400,
  color = { 0, 1, 0, buttonAlpha },
  font_color = { 0, 0, 0, buttonAlpha }
}

local blockFaceBButtonParams = {
  click_function = 'onButtonClick',
  function_owner = Global,
  label = 'B',
  position = { 0, -0.5, 0 },
  rotation = { 180, 0, 0 },
  scale = { 1, 1, 1 },
  width = 500,
  height = 500,
  font_size = 400,
  color = { 0, 1, 0, buttonAlpha },
  font_color = { 0, 0, 0, buttonAlpha }
}

local blockFaceCButtonParams = {
  click_function = 'onButtonClick',
  function_owner = Global,
  label = 'C',
  position = { 0.5, 0, 0 },
  rotation = { 0, 0, 90 },
  scale = { 1, 1, 1 },
  width = 500,
  height = 500,
  font_size = 400,
  color = { 0, 1, 0, buttonAlpha },
  font_color = { 0, 0, 0, buttonAlpha }
}

local blockFaceDButtonParams = {
  click_function = 'onButtonClick',
  function_owner = Global,
  label = 'D',
  position = { -0.5, 0 , 0 },
  rotation = { 0, 0, -90 },
  scale = { 1, 1, 1 },
  width = 500,
  height = 500,
  font_size = 400,
  color = { 0, 1, 0, buttonAlpha },
  font_color = { 0, 0, 0, buttonAlpha }
}

local blockFaceEButtonParams = {
  click_function = 'onButtonClick',
  function_owner = Global,
  label = 'E',
  position = { 0, 0, 0.5 },
  rotation = { -90, 0, 0 },
  scale = { 1, 1, 1 },
  width = 500,
  height = 500,
  font_size = 400,
  color = { 0, 1, 0, buttonAlpha },
  font_color = { 0, 0, 0, buttonAlpha }
}

local blockFaceFButtonParams = {
  click_function = 'onButtonClick',
  function_owner = Global,
  label = 'F',
  position = { 0, 0, -0.5 },
  rotation = { 90, 0, 0 },
  scale = { 1, 1, 1 },
  width = 500,
  height = 500,
  font_size = 400,
  color = { 0, 1, 0, buttonAlpha },
  font_color = { 0, 0, 0, buttonAlpha }
}

function addButtons(block)
  if debug then print('addButtons') end
  block.createButton(blockFaceAButtonParams)
  block.createButton(blockFaceBButtonParams)
  block.createButton(blockFaceCButtonParams)
  block.createButton(blockFaceDButtonParams)
  block.createButton(blockFaceEButtonParams)
  block.createButton(blockFaceFButtonParams)
end

function onButtonClick(block, player_color)
  if debug then print('onButtonClick') end
  if player_color == 'Grey' then return end
  local player = Player[player_color]
  resolveClick(player, block)
end

function resolveClick(player, block)
  if debug then print('resolveClick') end
  local playerData = knownPlayers[player.steam_id]

  playerData.attacks = playerData.attacks + 1

  local blockHealth = block.getVar('health')

  blockHealth = blockHealth - playerLevelProperties[playerData.level].damage

  if blockHealth > 0 then
    pulseBlock(block, player.color)
  elseif blockHealth <= 0 then
    if livingClickBlocks[block] then
      livingClickBlocks[block] = nil

      playerData.kills = playerData.kills + 1
      playerData.experience = playerData.experience + block.getVar('experience')

      local playerLevel = math.floor(playerData.experience / experiencePerLevel) + 1
      playerData.level = math.min(playerLevel, #playerLevelProperties)

      local blockLevel = block.getVar('level')
      if blockLevel == 5 then
        for key, value in pairs(getAllClickBlocks()) do
          value.setLock(false)
        end
      end

      hideBlock(block, player.color)
    end
  end

  block.setVar('health', blockHealth)

  displayScores()
end

function colorNameToHex(color_name)
  if debug then print('colorNameToHex') end
  local color = stringColorToRGB(color_name)
  return string.format('%x%x%x', color.r * 255, color.g * 255, color.b * 255)
end

function displayScores()
  if debug then print('displayScores') end
  local notes = ''
  for steam_id, playerData in pairs(knownPlayers) do
    local playerNotes = '[' .. colorNameToHex(playerData.color) .. ']'
      .. playerData.name .. ' - Level(' .. playerData.level .. ')\n'
      .. 'experience(' .. playerData.experience .. ')' .. ' attacks(' .. playerData.attacks .. ') kills(' .. playerData.kills .. ')\n'
      .. 'damage(' .. playerLevelProperties[playerData.level].damage .. ') assistants(' .. playerLevelProperties[playerData.level].assistants .. ')'
      .. '[-]\n'
    notes = notes .. playerNotes
  end
  setNotes(notes)
end

function wait(delay)
  if debug then print('wait') end
  local start = os.time()
  while os.time() - start < delay do coroutine.yield(0) end
end

local pulseBlockStates = {
  { scale = { 1.1, 1.1, 1.1 } },
  { scale = { 0.9, 0.9, 0.9 } },
  { scale = { 1.0, 1.0, 1.0 } },
}

function pulseBlock(block, colorName)
  if debug then print('pulseBlock') end
  function pulseBlockCoroutine()
    if debug then print('pulseBlockCoroutine') end
    block.setScale(pulseBlockStates[1].scale)
    wait(0.1)
    block.setScale(pulseBlockStates[2].scale)
    wait(0.1)
    block.setScale(pulseBlockStates[3].scale)
    return 1
  end
  startLuaCoroutine(Global, 'pulseBlockCoroutine')
end

local hideBlockStates = {
  { scale = { 1.000, 1.000, 1.000 } },
  { scale = { 0.750, 0.750, 0.750 } },
  { scale = { 0.500, 0.500, 0.500 } },
  { scale = { 0.250, 0.250, 0.250 } },
  { scale = { 0.001, 0.001, 0.001 } },
}

function hideBlock(block, colorName)
  if debug then print('hideBlock') end
  function hideBlockCoroutine()
    if debug then print('hideBlockCoroutine') end
    block.setScale(hideBlockStates[1].scale)
    block.setColorTint(mapColorNameRGBShades[colorName .. '1'])
    wait(0.1)
    block.setScale(hideBlockStates[2].scale)
    block.setColorTint(mapColorNameRGBShades[colorName .. '2'])
    wait(0.1)
    block.setScale(hideBlockStates[3].scale)
    block.setColorTint(mapColorNameRGBShades[colorName .. '3'])
    wait(0.1)
    block.setScale(hideBlockStates[4].scale)
    block.setColorTint(mapColorNameRGBShades[colorName .. '4'])
    wait(0.1)
    block.setScale(hideBlockStates[5].scale)
    block.setColorTint(mapColorNameRGBShades[colorName .. '5'])
    return 1
  end
  startLuaCoroutine(Global, 'hideBlockCoroutine')
end
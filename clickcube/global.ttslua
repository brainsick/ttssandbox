local debug = false

function onLoad()
  clearTable()
  trackCurrentPlayers()
  spawnClickcube()
end

function clearTable()
  for key, value in pairs(getAllObjects()) do
    value.destruct()
  end
end

function trackCurrentPlayers()
  for index, player in ipairs(Player.getPlayers()) do
    if player.color ~= 'Grey' then
      trackPlayer(player)
    end
  end
end

function onPlayerChangedColor(player_color)
  if player_color == 'Grey' then return end
  local player = Player[player_color]
  trackPlayer(player)
end

local knownPlayers = {}
function trackPlayer(player)
  local steam_id = player.steam_id

  local playerData = knownPlayers[steam_id]
  if playerData == nil then
    playerData = initNewPlayer(player)
    knownPlayers[steam_id] = playerData
  else
    playerData.color = player.color
  end

  displayScores()
end

function initNewPlayer(player)
  return {
    color = player.color,
    name = player.steam_name,
    clicks = 0,
    kills = 0,
    experience = 0
  }
end

function spawnClickcube()
  local spawnClickcubeBlockParams = {
    position = { x = 0, y = 0, z = 0 },
    tint = { r = 0, g = 0, b = 0, a = 0 }
  }
  for x = -4, 4 do
    for y = 0, 8 do
      for z = -4, 4 do
        spawnClickcubeBlockParams.position.x = x
        spawnClickcubeBlockParams.position.y = 1.5 + y
        spawnClickcubeBlockParams.position.z = z
        if x == 0 and y == 4 and z == 0 then
          spawnClickcubeBlockParams.tint.r = 0
          spawnClickcubeBlockParams.tint.g = 1
          spawnClickcubeBlockParams.tint.b = 0
          spawnClickcubeBlockParams.tint.a = 1
        else
          spawnClickcubeBlockParams.tint.r = 1
          spawnClickcubeBlockParams.tint.g = 0
          spawnClickcubeBlockParams.tint.b = 0
          spawnClickcubeBlockParams.tint.a = 1
        end
        spawnClickcubeBlock(spawnClickcubeBlockParams)
      end
    end
  end
end

local buttonAlpha = debug and 1 or 0
local buttonParamsA = {
  click_function = 'onButtonClick',
  function_owner = Global,
  label = 'A',
  position = { 0, 0.5, 0 },
  rotation = { 0, 0, 0 },
  scale = { 1, 1, 1 },
  width = 500,
  height = 500,
  font_size = 400,
  color = { 0, 1, 0, buttonAlpha },
  font_color = { 0, 0, 0, buttonAlpha }
}

local buttonParamsB = {
  click_function = 'onButtonClick',
  function_owner = Global,
  label = 'B',
  position = { 0, -0.5, 0 },
  rotation = { 180, 0, 0 },
  scale = { 1, 1, 1 },
  width = 500,
  height = 500,
  font_size = 400,
  color = { 0, 1, 0, buttonAlpha },
  font_color = { 0, 0, 0, buttonAlpha }
}

local buttonParamsC = {
  click_function = 'onButtonClick',
  function_owner = Global,
  label = 'C',
  position = { 0.5, 0, 0 },
  rotation = { 0, 0, 90 },
  scale = { 1, 1, 1 },
  width = 500,
  height = 500,
  font_size = 400,
  color = { 0, 1, 0, buttonAlpha },
  font_color = { 0, 0, 0, buttonAlpha }
}

local buttonParamsD = {
  click_function = 'onButtonClick',
  function_owner = Global,
  label = 'D',
  position = { -0.5, 0 , 0 },
  rotation = { 0, 0, -90 },
  scale = { 1, 1, 1 },
  width = 500,
  height = 500,
  font_size = 400,
  color = { 0, 1, 0, buttonAlpha },
  font_color = { 0, 0, 0, buttonAlpha }
}

local buttonParamsE = {
  click_function = 'onButtonClick',
  function_owner = Global,
  label = 'E',
  position = { 0, 0, 0.5 },
  rotation = { -90, 0, 0 },
  scale = { 1, 1, 1 },
  width = 500,
  height = 500,
  font_size = 400,
  color = { 0, 1, 0, buttonAlpha },
  font_color = { 0, 0, 0, buttonAlpha }
}

local buttonParamsF = {
  click_function = 'onButtonClick',
  function_owner = Global,
  label = 'F',
  position = { 0, 0, -0.5 },
  rotation = { 90, 0, 0 },
  scale = { 1, 1, 1 },
  width = 500,
  height = 500,
  font_size = 400,
  color = { 0, 1, 0, buttonAlpha },
  font_color = { 0, 0, 0, buttonAlpha }
}

local spawnObjectParams = {
  type = 'BlockSquare'
}

function spawnClickcubeBlock(params)
  spawnObjectParams.position = params.position

  local block = spawnObject(spawnObjectParams)
  block.setColorTint(params.tint)

  block.setLock(true)

  block.setVar('health', 10)

  block.createButton(buttonParamsA)
  block.createButton(buttonParamsB)

  block.createButton(buttonParamsC)
  block.createButton(buttonParamsD)

  block.createButton(buttonParamsE)
  block.createButton(buttonParamsF)

  return block
end

function colorNameToHex(color_name)
  local color = stringColorToRGB(color_name)
  return string.format('%x%x%x', color.r * 255, color.g * 255, color.b * 255)
end

function displayScores()
  local notes = ''
  for steam_id, playerData in pairs(knownPlayers) do
    local playerNotes = '[' .. colorNameToHex(playerData.color) .. ']'
      .. playerData.name .. ': click(' .. playerData.clicks .. ') kill(' .. playerData.kills .. ')'
      .. '[-]\n'
    notes = notes .. playerNotes
  end
  setNotes(notes)
end

function onButtonClick(block, player_color)
  if player_color == 'Grey' then return end
  local player = Player[player_color]
  resolveClick(player, block)
end

function resolveClick(player, block)
  local playerData = knownPlayers[player.steam_id]

  playerData.clicks = playerData.clicks + 1
  displayScores()

  local clickCount = (block.getVar('clickCount') or 0) + 1
  local blockHealth = block.getVar('health')

  if clickCount < blockHealth then
    pulseBlock(block)
  elseif clickCount == blockHealth then
    playerData.kills = playerData.kills + 1
    killBlock(block)
  end

  block.setVar('clickCount', clickCount)
end

function wait(delay)
  local start = os.time()
  while os.time() - start < delay do coroutine.yield(0) end
end

local pulseBlockScales = {
  { 1.1, 1.1, 1.1 },
  { 0.9, 0.9, 0.9 },
  { 1, 1, 1 }
}

function pulseBlock(block)
  function pulseBlockCoroutine()
    block.setScale(pulseBlockScales[1])
    wait(0.1)
    block.setScale(pulseBlockScales[2])
    wait(0.1)
    block.setScale(pulseBlockScales[3])
    return 1
  end
  startLuaCoroutine(Global, 'pulseBlockCoroutine')
end

function killBlock(block)
  function killBlockCoroutine()
    local scale = block.getScale()
    block.setColorTint({ 1, 1, 0, 1 })
    block.setScale({ scale.x * 0.9, scale.y * 0.9, scale.z * 0.9 })
    wait(0.2)
    block.setColorTint({ 0, 1, 1, 1 })
    block.setScale({ scale.x * 0.8, scale.y * 0.8, scale.z * 0.8 })
    wait(0.2)
    block.setColorTint({ 1, 0, 1, 1 })
    block.setScale({ scale.x * 0.7, scale.y * 0.7, scale.z * 0.7 })
    wait(0.2)
    block.destruct()
    return 1
  end
  startLuaCoroutine(Global, 'killBlockCoroutine')
end